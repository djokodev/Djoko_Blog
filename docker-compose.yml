# docker-compose.yml

networks:
dokploy_network:
  external: true
  name: dokploy-network

services:
web: # Gunicorn/Django
  build: .
  command: sh /app/run.sh
  volumes:
    - static_volume:/app/staticfiles # Gunicorn a toujours besoin d'y accéder pour collectstatic
    - media_volume:/app/media # Gunicorn a besoin d'y écrire les uploads
  depends_on:
    - db
  env_file:
    - .env
  restart: always
  labels:
    - "traefik.enable=true"

    # --- Routeur HTTP pour Django (priorité basse) ---
    - "traefik.http.routers.blog-django-http.rule=Host(`blog.djokodev.com`)"
    - "traefik.http.routers.blog-django-http.entrypoints=web"
    - "traefik.http.routers.blog-django-http.priority=10" # Priorité par défaut/basse
    - "traefik.http.routers.blog-django-http.service=blog-django-service" # Service Gunicorn

    # --- Routeur HTTPS pour Django (priorité basse) ---
    - "traefik.http.routers.blog-django-https.rule=Host(`blog.djokodev.com`)"
    - "traefik.http.routers.blog-django-https.entrypoints=websecure"
    - "traefik.http.routers.blog-django-https.tls=true"
    - "traefik.http.routers.blog-django-https.tls.certresolver=letsencrypt"
    - "traefik.http.routers.blog-django-https.priority=10" # Priorité par défaut/basse
    - "traefik.http.routers.blog-django-https.service=blog-django-service" # Service Gunicorn

    # --- Service Traefik pointant vers Gunicorn ---
    - "traefik.http.services.blog-django-service.loadbalancer.server.port=8000"

    # --- Réseau pour Traefik ---
    - "traefik.docker.network=dokploy-network"
  networks:
    - default
    - dokploy_network

# === NOUVEAU SERVICE NGINX POUR STATICS/MEDIA ===
nginx-static:
  image: nginx:stable-alpine
  restart: always
  volumes:
    # Monter les volumes en lecture seule car Nginx ne fait que lire
    - static_volume:/app/staticfiles:ro
    - media_volume:/app/media:ro
    # Monter le nouveau fichier de configuration
    - ./nginx-static.conf:/etc/nginx/conf.d/default.conf:ro
  labels:
    - "traefik.enable=true"

    # --- Routeur HTTP pour Statics (priorité haute) ---
    - "traefik.http.routers.blog-static-http.rule=Host(`blog.djokodev.com`) && PathPrefix(`/static/`)"
    - "traefik.http.routers.blog-static-http.entrypoints=web"
    - "traefik.http.routers.blog-static-http.priority=15" # Priorité haute
    - "traefik.http.routers.blog-static-http.service=blog-static-service" # Service Nginx-Static

    # --- Routeur HTTPS pour Statics (priorité haute) ---
    - "traefik.http.routers.blog-static-https.rule=Host(`blog.djokodev.com`) && PathPrefix(`/static/`)"
    - "traefik.http.routers.blog-static-https.entrypoints=websecure"
    - "traefik.http.routers.blog-static-https.tls=true"
    - "traefik.http.routers.blog-static-https.tls.certresolver=letsencrypt"
    - "traefik.http.routers.blog-static-https.priority=15" # Priorité haute
    - "traefik.http.routers.blog-static-https.service=blog-static-service" # Service Nginx-Static

    # --- Routeur HTTP pour Media (priorité haute) ---
    - "traefik.http.routers.blog-media-http.rule=Host(`blog.djokodev.com`) && PathPrefix(`/media/`)"
    - "traefik.http.routers.blog-media-http.entrypoints=web"
    - "traefik.http.routers.blog-media-http.priority=15" # Priorité haute
    - "traefik.http.routers.blog-media-http.service=blog-static-service" # Service Nginx-Static

    # --- Routeur HTTPS pour Media (priorité haute) ---
    - "traefik.http.routers.blog-media-https.rule=Host(`blog.djokodev.com`) && PathPrefix(`/media/`)"
    - "traefik.http.routers.blog-media-https.entrypoints=websecure"
    - "traefik.http.routers.blog-media-https.tls=true"
    - "traefik.http.routers.blog-media-https.tls.certresolver=letsencrypt"
    - "traefik.http.routers.blog-media-https.priority=15" # Priorité haute
    - "traefik.http.routers.blog-media-https.service=blog-static-service" # Service Nginx-Static

    # --- Service Traefik pointant vers Nginx-Static ---
    - "traefik.http.services.blog-static-service.loadbalancer.server.port=80" # Nginx écoute sur 80 en interne

    # --- Réseau pour Traefik ---
    - "traefik.docker.network=dokploy-network"
  networks:
    # Uniquement besoin d'être sur le réseau externe pour Traefik
    - dokploy_network
# === FIN DU NOUVEAU SERVICE ===

db:
  image: postgres:16
  volumes:
    - postgres_data:/var/lib/postgresql/data/
  environment:
    - POSTGRES_PASSWORD=${DB_PASSWORD}
    - POSTGRES_USER=${DB_USER}
    - POSTGRES_DB=${DB_NAME}
  restart: always
  networks:
    - default

volumes:
  postgres_data:
  static_volume:
  media_volume:
