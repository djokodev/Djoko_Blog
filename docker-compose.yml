services:
  web:
    build: .
    volumes:
      # Volume pour les fichiers statiques (partagé avec nginx)
      - static_volume:/app/staticfiles
      # Volume pour les fichiers médias (partagé avec nginx)
      - media_volume:/app/mediafiles
      # Optionnel: Monter le code source pour le développement, mais pas idéal pour simuler la prod
      # Si vous voulez simuler la prod, enlevez cette ligne car le code est copié par le Dockerfile
      - .:/app
    # Plus besoin d'exposer le port ici, Nginx s'en occupe
    # ports:
    #  - "8000:8000" # Supprimé/Commenté
    depends_on:
      - db
    env_file:
      - .env
    restart: always

  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    restart: always

  nginx:
    image: nginx:stable-alpine
    ports:
      # Expose le port 80 de Nginx sur le port 80 de votre machine hôte
      - "80:80"
    volumes:
      # Monter la configuration Nginx
      - ./nginx.conf:/etc/nginx/conf.d/default.conf  # Adaptez si vous mettez nginx.conf ailleurs
      # Partager le volume des fichiers statiques (lecture seule pour nginx)
      - static_volume:/app/staticfiles:ro
      # Partager le volume des fichiers médias (lecture seule pour nginx)
      - media_volume:/app/mediafiles:ro
    depends_on:
      # S'assurer que le service web est démarré avant nginx (pas une garantie qu'il soit prêt)
      - web
    restart: always

volumes:
  postgres_data:
  # Définir les volumes nommés pour les statiques et médias
  static_volume:
  media_volume:
